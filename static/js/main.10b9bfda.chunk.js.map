{"version":3,"sources":["Card.js","Deck.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","angle","Math","random","xPos","yPos","_transform","style","transform","this","className","src","image","alt","name","Component","Deck","state","deck","drawn","getCard","bind","axios","get","setState","data","id","deck_id","cardUrl","response","success","Error","console","log","card","cards","st","code","value","suit","alert","map","key","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yVAgBeA,G,wDAZX,WAAYC,GAAO,IAAD,sBACd,cAAMA,GACN,IAAIC,EAAwB,GAAhBC,KAAKC,SAAe,GAC5BC,EAAuB,GAAhBF,KAAKC,SAAgB,GAC5BE,EAAuB,GAAhBH,KAAKC,SAAe,GAJjB,OAKd,EAAKG,WAAL,oBAA+BF,EAA/B,eAA0CC,EAA1C,sBAA4DJ,EAA5D,QALc,E,qDASd,OAAO,yBAAKM,MAAO,CAACC,UAAWC,KAAKH,YAAaI,UAAU,OAAOC,IAAKF,KAAKT,MAAMY,MAAOC,IAAKJ,KAAKT,MAAMc,W,GAV9FC,c,wBC8DJC,E,kDAzDX,WAAYhB,GAAO,IAAD,8BACd,cAAMA,IACDiB,MAAQ,CACTC,KAAM,KACNC,MAAO,IAEX,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBAND,E,gMAUIC,IAAMC,IAAN,UAdL,uCAcK,iB,OAAdL,E,OACJT,KAAKe,SAAS,CAACN,KAAMA,EAAKO,O,mQAKtBC,EAAKjB,KAAKQ,MAAMC,KAAKS,Q,SAEjBC,E,UAtBK,wC,OAsBuBF,E,mBACXJ,IAAMC,IAAIK,G,WAA3BC,E,QACSJ,KAAKK,Q,sBACR,IAAIC,MAAM,8B,OAEpBC,QAAQC,IAAIJ,EAASJ,MACjBS,EAAOL,EAASJ,KAAKU,MAAM,GAC/B1B,KAAKe,UAAU,SAAAY,GAAE,MAAK,CAClBjB,MAAM,GAAD,mBACEiB,EAAGjB,OADL,CAED,CACIO,GAAIQ,EAAKG,KACTzB,MAAOsB,EAAKtB,MACZE,KAAK,GAAD,OAAKoB,EAAKI,MAAV,eAAsBJ,EAAKK,a,kDAM3CC,MAAM,EAAD,I,+IAMT,IAAML,EAAQ1B,KAAKQ,MAAME,MAAMsB,KAAK,SAAAP,GAAI,OACpC,kBAAC,EAAD,CAAMQ,IAAKR,EAAKR,GAAId,MAAOsB,EAAKtB,MAAOE,KAAMoB,EAAKpB,UAEtD,OACI,yBAAKJ,UAAU,QACX,wBAAIA,UAAU,eAAd,eACA,wBAAIA,UAAU,wBAAd,mBACA,4BAAQA,UAAU,WAAWiC,QAASlC,KAAKW,SAA3C,aACA,yBAAKV,UAAU,iBAAiByB,S,GApD7BpB,aCKJ6B,MARf,WACE,OACE,yBAAKlC,UAAU,OACb,kBAAC,EAAD,QCKcmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.10b9bfda.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Card.css';\n\nclass Card extends Component {\n    constructor(props){\n        super(props);\n        let angle = Math.random() * 90 -45;\n        let xPos = Math.random() * 40 - 20;\n        let yPos = Math.random() * 40 -20;\n        this._transform = `translate(${xPos}px, ${yPos}px) rotate(${angle}deg)`;\n    }\n    render(){\n\n        return <img style={{transform: this._transform}} className=\"Card\" src={this.props.image} alt={this.props.name} />\n    }\n}\nexport default Card","import React, { Component } from 'react';\nimport Card from './Card';\nimport './Deck.css';\nimport axios from 'axios';\nconst  API_BASE_URL= 'https://deckofcardsapi.com/api/deck/';\n\n\nclass Deck extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            deck: null,\n            drawn: []\n        };\n        this.getCard = this.getCard.bind(this);\n    }\n\n    async componentDidMount() {\n        let deck  = await axios.get(`${API_BASE_URL}new/shuffle/`);\n        this.setState({deck: deck.data});\n    }\n\n    async getCard(){\n        // Make request using deck id\n        let id = this.state.deck.deck_id;\n        try {\n            let cardUrl = `${API_BASE_URL}${id}/draw/`\n            let response = await axios.get(cardUrl);\n            if(!response.data.success){\n                throw new Error(\"No Card remaining on deck!\");\n            }\n            console.log(response.data);\n            let card = response.data.cards[0];\n            this.setState( st => ({\n                drawn: [\n                    ...st.drawn,\n                    {\n                        id: card.code, \n                        image: card.image,\n                        name: `${card.value} of ${card.suit}`\n                    }\n                ]\n            }));\n        //Set state using new card info from API\n        } catch (err) {\n            alert(err);\n        }\n        \n        \n    }\n    render(){\n        const cards = this.state.drawn.map( card => (\n            <Card key={card.id} image={card.image} name={card.name} />\n        ))\n        return(\n            <div className=\"Deck\">\n                <h1 className=\" Deck-title\">Card Dealer</h1>\n                <h2 className=\" Deck-title subtitle\">made with React</h2>\n                <button className=\"Deck-btn\" onClick={this.getCard}>Get Card!</button>\n                <div className=\"Deck-cardarea\">{cards}</div>\n            </div>\n        );\n    }\n}\n\nexport default Deck;","import React from 'react';\nimport './App.css';\nimport Deck from './Deck';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Deck />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}